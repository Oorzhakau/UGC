version: "3.8"

services:

  auth_service:
    build:
      context: ../../auth_app/.
      dockerfile: Dockerfile
    depends_on:
      auth_redis:
        condition: service_healthy
      auth_postgres:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "5000:5000"

  tests:
    build:
      context: ../../.
      dockerfile: tests/functional/Dockerfile
    env_file:
      - .env
    entrypoint: >
      sh -c "poetry config virtualenvs.create false &&
             poetry install --no-interaction --no-ansi &&
             poetry run python /usr/src/tests/functional/utils/wait_for_postgres.py &&
             poetry run python /usr/src/tests/functional/utils/wait_for_redis.py &&
             poetry run python /usr/src/tests/functional/utils/wait_for_kafka.py &&
             poetry run python /usr/src/tests/functional/utils/wait_for_clickhouse.py &&
             poetry run python /usr/src/tests/functional/utils/wait_for_auth.py &&
             poetry run pytest /usr/src/tests/functional/src -v"
    depends_on:
      - auth_service
      - ugc_service
      - ugc_etl
      - nginx

  auth_redis:
    image: redis:6.2.6
    env_file:
      - .env
    volumes:
      - auth_redis_src:/auth_app/redis/data
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: always

  auth_postgres:
    image: postgres:15.1-alpine
    env_file:
      - .env
    volumes:
      - $HOME/postgresql/users:/var/lib/postgresql/users
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB_HOST: ${AUTH_POSTGRES_DB_HOST}
      POSTGRES_DB_PORT: ${AUTH_POSTGRES_DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 80s
    restart: always

  ugc_service:
    build:
      context: ../../ugc_app/.
    env_file:
      - .env
    ports:
      - "8010:8000"
    depends_on:
      - kafka_zookeeper
      - kafka_broker
      - auth_service
    restart: always

  nginx:
    image: nginx:1.23.1-alpine
    volumes:
      - ../../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../nginx/configs:/etc/nginx/conf.d:ro
    depends_on:
      - auth_service
      - ugc_service
    ports:
      - "80:80"

  kafka_zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka_broker:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    expose:
      - "29092"
    depends_on:
      - kafka_zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "kafka_zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka_broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka_broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka_broker:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka_broker:29092 --create --if-not-exists --topic views --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka_broker:29092 --list
      "

  jaeger:
    image: jaegertracing/all-in-one:latest
    depends_on:
      - nginx
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  clickhouse-node1:
    image: yandex/clickhouse-server:20.4
    hostname: clickhouse-node1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ../../olap_storage/clickhouse/data/node1:/etc/clickhouse-server
    depends_on:
      - kafka_zookeeper

  clickhouse-node2:
    image: yandex/clickhouse-server:20.4
    hostname: clickhouse-node2
    volumes:
      - ../../olap_storage/clickhouse/data/node2:/etc/clickhouse-server
    depends_on:
      - kafka_zookeeper

  clickhouse-node3:
    image: yandex/clickhouse-server:20.4
    hostname: clickhouse-node3
    volumes:
      - ../../olap_storage/clickhouse/data/node3:/etc/clickhouse-server
    depends_on:
      - kafka_zookeeper

  clickhouse-node4:
    image: yandex/clickhouse-server:20.4
    hostname: clickhouse-node4
    volumes:
      - ../../olap_storage/clickhouse/data/node4:/etc/clickhouse-server
    depends_on:
      - kafka_zookeeper

  ugc_etl:
    build:
      context: ../../etl_olap/.
    env_file:
      - .env
    depends_on:
      - ugc_service
      - clickhouse-node1

volumes:
  auth_redis_src:
